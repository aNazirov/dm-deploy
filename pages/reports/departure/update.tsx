import React, {useEffect} from "react";
import Head from "next/head";
import cn from "classnames";
import {AppButton, AppCard, AppDivider, AppInput} from "../../../components/Main";
import styles from "../../../styles/reports.module.scss";
import SuccessIcon from "../../../assets/images/icons/filled/checked.svg";
import ChevronIcon from "../../../assets/images/icons/filled/arrows/chevron-left.svg";
import {useRouter} from "next/router";
import {useAppDispatch} from "../../../core/hooks";
import {useForm} from "react-hook-form";
import {DepartureReportModel, ePlace, IReportDepartureCreateParams} from "../../../core/models";
import {
	getDepartureReportByIdThunk,
	updateDepartureReportThunk,
} from "../../../core/store/report/departure/departure-report.thunks";
import {ReactSelect} from "../../../components/External";
import {countryOptions} from "../../../core/models/appendix/countries";
import {setDepartureReportByIdAction} from "../../../core/store/report/departure/departure-report.slices";

const fieldOptions = {
	required: true,
	valueAsNumber: true,
};

const DepartureReportUpdatePage = () => {
	const router = useRouter();

	const reportId = router.query["reportId"] as string;

	const dispatch = useAppDispatch();

	const {register, handleSubmit, reset, setValue, getValues} = useForm<IReportDepartureCreateParams>();

	useEffect(() => {
		if (reportId) {
			const promise = dispatch(getDepartureReportByIdThunk(+reportId));
			promise.then((res) => {
				if (res.payload) {
					const fields = res.payload as DepartureReportModel;
					reset(fields);
				}
			});

			return () => {
				promise.abort();
				dispatch(setDepartureReportByIdAction(null));
			};
		}
	}, [reportId]);

	const onSubmit = async (fields: IReportDepartureCreateParams) => {
		const action = await dispatch(updateDepartureReportThunk({id: +reportId, body: fields}));
		const id = action.payload as number;

		if (id) {
			void router.push(`/reports/departure/${id}`);
		}
	};

	const onSelect = (option: unknown) => {
		const field = option as {value: Exclude<ePlace, ePlace.Intenational | ePlace.Other>};
		setValue("place", field.value);
	};
	return (
		<>
			<Head>
				<title>Проделанная работа в регионах</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<h1 className="h1 text-center">Проделанная работа в регионах</h1>

			<AppDivider className="my-1.25" />

			{/*TODO: make a filter component*/}
			<div className={styles.filters}>
				<label className={styles.filterLabel}>
					<span className="text-main-bold">Дата</span>
					<AppInput type="date" />
				</label>

				<label className={styles.filterLabel}>
					<span className="text-main-bold">Номер:</span>
					<AppButton variant="main" size="square">
						80
					</AppButton>
				</label>
			</div>
			<div className={cn(styles.cardDesk, styles.cardDeskGrid2)}>
				<div className={styles.cardWrapper}>
					<AppCard className="h-100 flex-col flex-justify-center">
						<AppCard.Body className={cn("gap-0.5", styles.cardRows)}>
							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									Область, куда был осуществлён выезд
								</span>

								{getValues().place !== undefined && (
									<ReactSelect
										className="text-center w-10"
										onChange={onSelect}
										defaultValue={countryOptions.filter((option) => option.value === getValues().place)}
										options={countryOptions.filter((c) => ![ePlace.Other, ePlace.Intenational].includes(c.value))}
										placeholder="Выберите ..."
									/>
								)}
							</label>

							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									Кол-во выездов в регионы
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("departures", fieldOptions)}
								/>
							</label>

							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									Количество выехавших специалистов
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("specialists", fieldOptions)}
								/>
							</label>

							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									Количество занятий, проведенных в регионе
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("lessons", fieldOptions)}
								/>
							</label>

							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									Количество семинаров, проведенных в регионе
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("seminars", fieldOptions)}
								/>
							</label>

							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									Кол-во специалистов получившие квалификацию на местах
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("educatedSpecialists", fieldOptions)}
								/>
							</label>
						</AppCard.Body>
					</AppCard>
				</div>

				<div className={styles.cardWrapper}>
					<AppCard className="h-100 flex-col flex-justify-center">
						<AppCard.Body className={cn("gap-0.5", styles.cardRows)}>
							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									Кол-во населения прошедших медосмотр
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("medicalCheckup", fieldOptions)}
								/>
							</label>

							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									В том числе, дети до 18 лет
								</span>
								<AppInput className="text-center" type="number" placeholder="0" {...register("minor", fieldOptions)} />
							</label>

							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									Кол-во выявленных пациетов
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("identifiedPatients", fieldOptions)}
								/>
							</label>

							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									В том числе, кол-во пациентов для амбулаторного лечения
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("outPatient", fieldOptions)}
								/>
							</label>

							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									В том числе, кол-во пациентов для стационарного лечения
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("inPatient", fieldOptions)}
								/>
							</label>
						</AppCard.Body>
					</AppCard>
				</div>
			</div>

			<div className={cn(styles.cardDesk, styles.cardDeskGrid2)}>
				<div className={styles.cardWrapper}>
					<AppCard className="h-100 flex-col flex-justify-center">
						<AppCard.Body className={cn("gap-0.5", styles.cardRows)}>
							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									Количество внедрённых методов диагностики на областном уровне
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("diagnosticMethodsRegion", fieldOptions)}
								/>
							</label>

							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									Количество внедрённых методов диагностики на районном уровне
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("diagnosticMethodsDistrict", fieldOptions)}
								/>
							</label>
						</AppCard.Body>
					</AppCard>
				</div>

				<div className={styles.cardWrapper}>
					<AppCard className="h-100 flex-col flex-justify-center">
						<AppCard.Body className={cn("gap-0.5", styles.cardRows)}>
							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									Количество внедрённых методов лечения на областном уровне
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("treatmentsRegion", fieldOptions)}
								/>
							</label>

							<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
								<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
									Количество внедрённых методов лечения на районном уровне
								</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("treatmentsDistrict", fieldOptions)}
								/>
							</label>
						</AppCard.Body>
					</AppCard>
				</div>
			</div>

			<div className="flex-justify-center">
				<AppCard className="h-100 flex-col flex-justify-center">
					<AppCard.Body className={cn("gap-0.5", styles.cardRows)}>
						<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
							<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
								Количество процедур, проведенных в регионе
							</span>
							<AppInput
								className="text-center"
								type="number"
								placeholder="0"
								{...register("procedures", fieldOptions)}
							/>
						</label>

						<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
							<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
								В том числе, кол-во высокотехнологичных операций
							</span>
							<AppInput
								className="text-center"
								type="number"
								placeholder="0"
								{...register("operations", fieldOptions)}
							/>
						</label>

						<label className={cn("flex-justify-between gap-1", styles.cardRow)}>
							<span className={cn("rounded text-main-bold flex-fill", styles.cardRowLabel)}>
								В том числе, количество высокотехнологичные манипуляций
							</span>
							<AppInput
								className="text-center"
								type="number"
								placeholder="0"
								{...register("manipulations", fieldOptions)}
							/>
						</label>
					</AppCard.Body>
				</AppCard>
			</div>

			<div className="flex-justify-between mt-auto pt-2.5">
				<AppButton useAs="link" href={`/reports/departure/${reportId}`} size="lg" variant="dark" withIcon>
					<ChevronIcon width="24px" height="24px" />
					Назад
				</AppButton>
				<AppButton onClick={handleSubmit(onSubmit)} size="lg" variant="success" withIcon>
					<SuccessIcon width="24px" height="24px" />
					<span>Сохранить</span>
				</AppButton>
			</div>
		</>
	);
};
export default DepartureReportUpdatePage;
