import React from "react";
import Head from "next/head";
import {AppButton, AppCard, AppDivider, AppInput} from "../../../components/Main";
import styles from "../../../styles/reports.module.scss";
import cn from "classnames";
import TrashIcon from "../../../assets/images/icons/filled/trash.svg";
import ChevronIcon from "../../../assets/images/icons/filled/arrows/chevron-left.svg";
import SuccessIcon from "../../../assets/images/icons/filled/checked.svg";
import PlusIcon from "../../../assets/images/icons/filled/plus.svg";
import {ReactSelect} from "../../../components/External";
import {useRouter} from "next/router";
import {useAppDispatch} from "../../../core/hooks";
import {useFieldArray, useForm} from "react-hook-form";
import {ePlace, IReportTelemedicineCreateParams} from "../../../core/models";
import {createTelemedicineReportThunk} from "../../../core/store/report/telemedicine/telemedicine.thunks";

const fieldOptions = {
	required: true,
	valueAsNumber: true,
};

const VisitForeignSpecialistsPage = () => {
	const router = useRouter();

	const dispatch = useAppDispatch();

	const {register, control, handleSubmit, watch, setValue, getValues} = useForm<IReportTelemedicineCreateParams>();
	const {fields, append, remove, swap, move, insert} = useFieldArray({
		control,
		name: "telemedicineParts",
	});

	const onAppend = () => {
		append({
			consultations: 0,
			councils: 0,
			demonstrationOperations: 0,
			seminars: 0,
			symposiums: 0,
			place: ePlace.Intenational,
		});
	};

	const onRemove = (index: number) => () => {
		remove(index);
	};

	const onSelect = (index: number) => (option: unknown) => {
		const field = option as {label: string; value: ePlace};
		setValue(`telemedicineParts.${index}.place`, field.value);
	};

	const onSubmit = async (fieldsArr: IReportTelemedicineCreateParams) => {
		const action = await dispatch(createTelemedicineReportThunk(fieldsArr));
		console.log(fieldsArr);
		console.log(action.payload);
	};

	const renderFieldRows = () => {
		return fields.map((field, index) => (
			<div className={cn("gap-1", styles.labelDeskGrid2)} key={field.id}>
				<div className={cn("gap-1", styles.labelDeskGrid6)}>
					<label className={styles.cardBodyLabel}>
						<div className="w-100">
							<ReactSelect onChange={onSelect(index)} options={countryOptions} placeholder="Выберите учреждение" />
						</div>
					</label>
					<label className={styles.cardBodyLabel}>
						<div className="w-100">
							<AppInput
								className="text-center"
								type="number"
								placeholder="-"
								{...register(`telemedicineParts.${index}.consultations`, fieldOptions)}
							/>
						</div>
					</label>
					<label className={styles.cardBodyLabel}>
						<div className="w-100">
							<AppInput
								className="text-center"
								type="number"
								placeholder="-"
								{...register(`telemedicineParts.${index}.councils`, fieldOptions)}
							/>
						</div>
					</label>
					<label className={styles.cardBodyLabel}>
						<div className="w-100">
							<AppInput
								className="text-center"
								type="number"
								placeholder="-"
								{...register(`telemedicineParts.${index}.demonstrationOperations`, fieldOptions)}
							/>
						</div>
					</label>
					<label className={styles.cardBodyLabel}>
						<div className="w-100">
							<AppInput
								className="text-center"
								type="number"
								placeholder="-"
								{...register(`telemedicineParts.${index}.seminars`, fieldOptions)}
							/>
						</div>
					</label>

					<label className={styles.cardBodyLabel}>
						<div className="w-100">
							<AppInput
								className="text-center"
								type="number"
								placeholder="-"
								{...register(`telemedicineParts.${index}.symposiums`, fieldOptions)}
							/>
						</div>
					</label>
				</div>

				<div className={styles.cardBodyLabel}>
					<AppButton onClick={onRemove(index)} type="button" variant="danger" size="square" withIcon>
						<TrashIcon width="24px" height="24px" />
					</AppButton>
				</div>
			</div>
		));
	};

	return (
		<>
			<Head>
				<title>Телемедицина (ОЦ)</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<h1 className="h1 text-center">Телемедицина (ОЦ)</h1>

			<AppDivider className="my-1.25" />

			<div className={styles.filters}>
				<label className={styles.filterLabel}>
					<span className="text-main-bold">Дата</span>
					<AppInput type="date" />
				</label>

				<label className={styles.filterLabel}>
					<span className="text-main-bold">Номер:</span>
					<AppButton variant="main" size="square">
						80
					</AppButton>
				</label>
			</div>

			<AppCard>
				<AppCard.Header>Основные данные</AppCard.Header>
				<AppCard.Body className="flex-col">
					<div className={cn("gap-1 mb-0.5", styles.labelDeskGrid2)}>
						<div className={cn("gap-1", styles.labelDeskGrid6)}>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Учреждение с кем была проведена телемедицина:</span>
							</label>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Количество консультаций:</span>
							</label>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Количество консилиумов:</span>
							</label>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Количество показательных операций:</span>
							</label>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Количество семинаров, мастер классов и т.п.:</span>
							</label>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Количество симпозиумов, конференций и т.п.:</span>
							</label>
						</div>

						<div className={styles.cardBodyLabel}>
							<span className="text-main-bold">Действие:</span>
						</div>
					</div>

					<div className="flex-col gap-2.5">
						{renderFieldRows()}

						<div className={cn("gap-1", styles.labelDeskGrid2)}>
							<div className={cn("gap-1", styles.labelDeskGrid6)}>
								<label className={styles.cardBodyLabel}>
									<div className="w-100">
										<ReactSelect
											onChange={onSelect(fields.length - 1)}
											options={countryOptions}
											styles={{
												indicatorSeparator: () => ({display: "none"}),
											}}
											placeholder="Выберите учреждение"
										/>
									</div>
								</label>
								<label className={styles.cardBodyLabel}>
									<div className="w-100">
										<AppInput
											className="text-center"
											type="number"
											placeholder="-"
											{...register(`telemedicineParts.${fields.length - 1}.consultations`, fieldOptions)}
										/>
									</div>
								</label>
								<label className={styles.cardBodyLabel}>
									<div className="w-100">
										<AppInput
											className="text-center"
											type="number"
											placeholder="-"
											{...register(`telemedicineParts.${fields.length - 1}.councils`, fieldOptions)}
										/>
									</div>
								</label>
								<label className={styles.cardBodyLabel}>
									<div className="w-100">
										<AppInput
											className="text-center"
											type="number"
											placeholder="-"
											{...register(`telemedicineParts.${fields.length - 1}.demonstrationOperations`, fieldOptions)}
										/>
									</div>
								</label>
								<label className={styles.cardBodyLabel}>
									<div className="w-100">
										<AppInput
											className="text-center"
											type="number"
											placeholder="-"
											{...register(`telemedicineParts.${fields.length - 1}.seminars`, fieldOptions)}
										/>
									</div>
								</label>
								<label className={styles.cardBodyLabel}>
									<div className="w-100">
										<AppInput
											className="text-center"
											type="number"
											placeholder="-"
											{...register(`telemedicineParts.${fields.length - 1}.symposiums`, fieldOptions)}
										/>
									</div>
								</label>
							</div>

							<div className={styles.cardBodyLabel}>
								<AppButton onClick={onAppend} type="button" variant="dark" size="square" withIcon>
									<PlusIcon width="24px" height="24px" />
								</AppButton>
							</div>
						</div>
					</div>
				</AppCard.Body>
			</AppCard>

			<div className="flex-justify-between mt-auto">
				<AppButton useAs="link" href="/reports/telemedicine" size="lg" variant="dark" withIcon>
					<ChevronIcon width="24px" height="24px" />
					Назад
				</AppButton>
				<AppButton onClick={handleSubmit(onSubmit)} size="lg" variant="success" withIcon>
					<SuccessIcon width="24px" height="24px" />
					<span>Отправить отчёт</span>
				</AppButton>
			</div>
		</>
	);
};

export default VisitForeignSpecialistsPage;

const countryOptions = [
	{value: ePlace.Intenational, label: "Международный"},
	{value: ePlace.Karakalpak, label: "Каракалпакстан"},
	{value: ePlace.TashkentCity, label: "город Ташкент"},
	{value: ePlace.Tashkent, label: "Ташкент"},
	{value: ePlace.Fergana, label: "Фергана"},
	{value: ePlace.Andijan, label: "Андижан"},
	{value: ePlace.Namangan, label: "Наманган"},
	{value: ePlace.Qashqadarya, label: "Кашкадарья"},
	{value: ePlace.Surhandarya, label: "Сурхандарья"},
	{value: ePlace.Samarkand, label: "Самарканд"},
	{value: ePlace.Sirdarya, label: "Сырдарья"},
	{value: ePlace.Buhara, label: "Бухара"},
	{value: ePlace.Harezm, label: "Хорезм"},
	{value: ePlace.Navai, label: "Навои"},
	{value: ePlace.Jizzah, label: "Джиззах"},
	{value: ePlace.Other, label: "Другое"},
];
