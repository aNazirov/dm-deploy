import React, {useEffect} from "react";
import Head from "next/head";
import cn from "classnames";
import {AppButton, AppCard, AppDivider, AppInput} from "../../../components/Main";
import styles from "../../../styles/reports.module.scss";
import SuccessIcon from "../../../assets/images/icons/filled/checked.svg";
import ChevronIcon from "../../../assets/images/icons/filled/arrows/chevron-left.svg";
import {useRouter} from "next/router";
import {useAppDispatch} from "../../../core/hooks";
import {useForm} from "react-hook-form";
import {DailyReportModel, IReportDailyCreateParams} from "../../../core/models";
import {getDailyReportByIdThunk, updateDailyReportThunk} from "../../../core/store/report/daily/daily-report.thunks";
import {setDailyReportByIdAction} from "../../../core/store/report/daily/daily-report.slices";
import moment from "moment";

const fieldOptions = {
	required: true,
	valueAsNumber: true,
};

const DailyReportUpdatePage = () => {
	const router = useRouter();
	const reportId = router.query["reportId"] as string;

	const dispatch = useAppDispatch();

	const {register, reset, handleSubmit, watch, setValue, getValues} = useForm<IReportDailyCreateParams>();

	useEffect(() => {
		if (reportId) {
			const promise = dispatch(getDailyReportByIdThunk(+reportId));

			promise.then((res) => {
				if (res.payload) {
					const fields = res.payload as DailyReportModel;

					reset({...fields, createdAt: moment(fields.createdAt).format("yyyy-MM-DD") as unknown as Date});
				}
			});

			const subscription = watch((value, {name}) => {
				if (name === "occupiedBeds" || name === "freeBeds") {
					const {freeBeds, occupiedBeds} = getValues();
					if (!isNaN(freeBeds) && !isNaN(occupiedBeds)) {
						setValue("totalBeds", freeBeds + occupiedBeds);
					}
				}
			});
			return () => {
				promise.abort();
				subscription.unsubscribe();
				dispatch(setDailyReportByIdAction(null));
			};
		}
	}, [reportId]);

	const onSubmit = async (fields: IReportDailyCreateParams) => {
		const action = await dispatch(updateDailyReportThunk({body: fields, id: +reportId}));
		const id = action.payload as number;

		if (id) {
			void router.push(`/reports/daily/${id}`);
		}
	};

	return (
		<>
			<Head>
				<title>Ежедневный отчёт</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<h1 className="h1 text-center">Ежедневный отчёт</h1>

			<AppDivider className="my-1.25" />

			{/*TODO: make a filter component*/}
			<div className={styles.filters}>
				<label className={styles.filterLabel}>
					<span className="text-main-bold">Дата</span>
					<AppInput type="date" {...register("createdAt", {required: true})} />
				</label>

				<label className={styles.filterLabel}>
					<span className="text-main-bold">Номер:</span>
					<AppButton variant="main" size="square">
						80
					</AppButton>
				</label>
			</div>

			<div className={cn(styles.cardDesk, styles.cardDeskGrid3)}>
				<div className={styles.cardWrapper}>
					<AppCard className="h-100">
						<AppCard.Header>Количество коек</AppCard.Header>
						<AppCard.Body className={cn(styles.cardBody)}>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Занято:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("occupiedBeds", fieldOptions)}
								/>
							</label>

							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Свободно:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("freeBeds", fieldOptions)}
								/>
							</label>

							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Итого:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									readOnly
									{...register("totalBeds", fieldOptions)}
								/>
							</label>
						</AppCard.Body>
					</AppCard>
				</div>

				<div className={styles.cardWrapper}>
					<AppCard className="h-100">
						<AppCard.Header>Количество пациентов (резиденты)</AppCard.Header>
						<AppCard.Body className={cn(styles.cardBody)}>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Амбулаторно:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("outPatientsRes", fieldOptions)}
								/>
							</label>

							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Стационар:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("inPatientsRes", fieldOptions)}
								/>
							</label>

							<label className={cn("flex-fill", styles.cardBodyLabel)}>
								<span className="text-main-bold whitespace-no-wrap">В том числе с направлением:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("otherPatientsRes", fieldOptions)}
								/>
							</label>
						</AppCard.Body>
					</AppCard>
				</div>

				<div className={styles.cardWrapper}>
					<AppCard className="h-100">
						<AppCard.Header>Количество пациентов (не резиденты)</AppCard.Header>
						<AppCard.Body className={cn(styles.cardBody, styles.grid2)}>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Амбулаторно:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("outPatients", fieldOptions)}
								/>
							</label>

							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Стационар:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("inPatients", fieldOptions)}
								/>
							</label>
						</AppCard.Body>
					</AppCard>
				</div>
			</div>

			<div className="flex-center">
				<h2 className={cn("h3", styles.topBottomBorder)}>Поступившие деньги</h2>
			</div>

			<div className={cn(styles.cardDesk, styles.cardDeskGrid4)}>
				<div className={styles.cardWrapper}>
					<AppCard className="h-100">
						<AppCard.Header>Поликлиника</AppCard.Header>
						<AppCard.Body className={cn(styles.cardBody)}>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Кассы:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("polyclinicCash", fieldOptions)}
								/>
							</label>

							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Перечисления:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("polyclinicReceiptsCash", fieldOptions)}
								/>
							</label>
						</AppCard.Body>
					</AppCard>
				</div>
				<div className={styles.cardWrapper}>
					<AppCard className="h-100">
						<AppCard.Header>Стационар</AppCard.Header>
						<AppCard.Body className={cn(styles.cardBody)}>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Кассы:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("hospitalCash", fieldOptions)}
								/>
							</label>

							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Перечисления:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("hospitalReceiptsCash", fieldOptions)}
								/>
							</label>
						</AppCard.Body>
					</AppCard>
				</div>

				<div className={styles.cardWrapper}>
					<AppCard className="h-100">
						<AppCard.Header>ГФМС</AppCard.Header>
						<AppCard.Body className={cn(styles.cardBody, styles.grid2)}>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">ГФМС:</span>
								<AppInput className="text-center" type="number" placeholder="0" {...register("gfms", fieldOptions)} />
							</label>
						</AppCard.Body>
					</AppCard>
				</div>

				<div className={styles.cardWrapper}>
					<AppCard className="h-100">
						<AppCard.Header>Другие поступления</AppCard.Header>
						<AppCard.Body className={cn(styles.cardBody, styles.grid2)}>
							<label className={styles.cardBodyLabel}>
								<span className="text-main-bold">Другие поступления:</span>
								<AppInput
									className="text-center"
									type="number"
									placeholder="0"
									{...register("otherReceipts", fieldOptions)}
								/>
							</label>
						</AppCard.Body>
					</AppCard>
				</div>
			</div>

			<div className="flex-justify-between mt-auto pt-2.5">
				<AppButton useAs="link" href={`/reports/daily/${reportId}`} size="lg" variant="dark" withIcon>
					<ChevronIcon width="24px" height="24px" />
					Назад
				</AppButton>
				<AppButton onClick={handleSubmit(onSubmit)} size="lg" variant="success" withIcon>
					<SuccessIcon width="24px" height="24px" />
					<span>Сохранить</span>
				</AppButton>
			</div>
		</>
	);
};
export default DailyReportUpdatePage;
